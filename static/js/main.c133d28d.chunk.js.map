{"version":3,"sources":["components/PostsList/PostsList.tsx","api/posts.ts","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","selectedPostId","onSelectPost","className","map","post","userId","title","id","type","onClick","request","url","options","fetch","then","response","json","NewCommentForm","onAddComment","useState","commentName","setCommentName","commentEmail","setCommentEmail","commentBody","setCommentBody","addNewComment","event","comment","preventDefault","postId","name","email","body","method","headers","JSON","stringify","onSubmit","placeholder","value","onChange","target","Loader","PostDetails","showComments","setShowComments","postDetails","setPostDetails","postDetailsLoaded","setPostDetailsLoaded","comments","setComments","isCommentAdded","setIsCommentAdded","loadPostDetails","a","loadedPostDetails","loadComments","loadedComments","useEffect","commentId","filter","item","App","users","setUsers","setPosts","postsLoaded","setPostsLoaded","selectedUserId","setSelectedUserId","setSelectedPostId","loadUsers","loadedUsers","firstTenUsers","user","loadPosts","loadedPosts","selectPostHandler","useCallback","ReactDOM","render","document","getElementById"],"mappings":"2WAUaA,EAA6BC,IAAMC,MAC9C,gBACEC,EADF,EACEA,MACAC,EAFF,EAEEA,eACAC,EAHF,EAGEA,aAHF,OAKE,sBAAKC,UAAU,YAAf,UACE,wCAEA,oBAAIA,UAAU,kBAAkB,UAAQ,cAAxC,SACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBAAIF,UAAU,kBAAd,UACE,gCACE,6CACaE,EAAKC,OADlB,SAGCD,EAAKE,SAGPF,EAAKG,KAAOP,EAET,wBACEQ,KAAK,SACLN,UAAU,2BACVO,QAAS,kBAAMR,EAAa,IAH9B,mBASA,wBACEO,KAAK,SACLN,UAAU,2BACVO,QAAS,WACPR,EAAaG,EAAKG,KAJtB,oBAnB+BH,EAAKG,e,MClBpD,SAASG,EAAQC,EAAaC,GAC5B,OAAOC,MAAM,GAAD,OCJU,qCDIV,OAAeF,GAAOC,GAC/BE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UEIxB,IAAMC,EAAkC,SAAC,GAGzC,IAFLjB,EAEI,EAFJA,eACAkB,EACI,EADJA,aAEA,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAEMC,EAAgB,SAACC,GAGrB,IFQuBC,EEVvBD,EAAME,kBFUiBD,EERJ,CACjBE,OAAQ9B,EACR+B,KAAMX,EACNY,MAAOV,EACPW,KAAMT,GFKHd,EACL,YACA,CACEwB,OAAQ,OACRC,QAAS,CACP,eAAgB,mCAElBF,KAAMG,KAAKC,UAAU,CACnBP,OAAQF,EAAQE,OAChBC,KAAMH,EAAQG,KACdC,MAAOJ,EAAQI,MACfC,KAAML,EAAQK,UEZfnB,MAAK,WACJI,GAAa,GACbG,EAAe,IACfE,EAAgB,IAChBE,EAAe,OAGnBP,GAAa,IAGf,OACE,uBACEhB,UAAU,iBACVoC,SAAU,SAACX,GAAD,OAAWD,EAAcC,IAFrC,UAIE,qBAAKzB,UAAU,aAAf,SACE,uBACEM,KAAK,OACLuB,KAAK,OACLQ,YAAY,YACZrC,UAAU,wBACVsC,MAAOpB,EACPqB,SAAU,SAACd,GAAD,OAAWN,EAAeM,EAAMe,OAAOF,YAIrD,qBAAKtC,UAAU,aAAf,SACE,uBACEM,KAAK,OACLuB,KAAK,QACLQ,YAAY,aACZrC,UAAU,wBACVsC,MAAOlB,EACPmB,SAAU,SAACd,GAAD,OAAWJ,EAAgBI,EAAMe,OAAOF,YAItD,qBAAKtC,UAAU,aAAf,SACE,0BACE6B,KAAK,OACLQ,YAAY,oBACZrC,UAAU,wBACVsC,MAAOhB,EACPiB,SAAU,SAACd,GAAD,OAAWF,EAAeE,EAAMe,OAAOF,YAIrD,wBACEhC,KAAK,SACLN,UAAU,uCAFZ,+BCxEOyC,G,YAAmB,kBAC9B,qBAAKzC,UAAU,SAAf,SACE,qBAAKA,UAAU,wBCUN0C,EAA+B/C,IAAMC,MAChD,YAEO,IADLE,EACI,EADJA,eAEA,EAAwCmB,oBAAS,GAAjD,mBAAO0B,EAAP,KAAqBC,EAArB,KACA,EAAsC3B,qBAAtC,mBAAO4B,EAAP,KAAoBC,EAApB,KACA,EAAkD7B,oBAAS,GAA3D,mBAAO8B,EAAP,KAA0BC,EAA1B,KACA,EAAgC/B,mBAAoB,IAApD,mBAAOgC,EAAP,KAAiBC,EAAjB,KACA,EAA4CjC,oBAAS,GAArD,mBAAOkC,EAAP,KAAuBC,EAAvB,KAEMC,EAAe,uCAAG,4BAAAC,EAAA,6DACtBN,GAAqB,GADC,SJRnBxC,EAAQ,UAAD,OIWqCV,IAHzB,OAGhByD,EAHgB,OAKtBP,GAAqB,GAErBF,EAAeS,GAPO,2CAAH,qDAUfC,EAAY,uCAAG,4BAAAF,EAAA,sEJdhB9C,EAAQ,oBAAD,OIemCV,IAD1B,OACb2D,EADa,OAGnBP,EAAYO,GAHO,2CAAH,qDAWlB,OALAC,qBAAU,WACRL,IACAG,MACC,CAAC1D,EAAgBqD,IAGlB,sBAAKnD,UAAU,cAAf,UACE,4DAAsB6C,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAaxC,MAElC0C,EAEG,yBAAS/C,UAAU,oBAAnB,SACE,mCAAI6C,QAAJ,IAAIA,OAAJ,EAAIA,EAAad,SAInB,cAAC,EAAD,IAGJ,0BAAS/B,UAAU,wBAAwB,UAAQ,cAAnD,UACG2C,EAEG,wBACErC,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAMqC,GAAgB,IAHjC,2BASA,wBACEtC,KAAK,SACLN,UAAU,SACVO,QAAS,kBAAMqC,GAAgB,IAHjC,2BASHD,GACC,oBAAI3C,UAAU,oBAAd,SACGiD,EAAShD,KAAI,SAACyB,GAAD,OACZ,qBAAI1B,UAAU,yBAAd,UACE,wBACEM,KAAK,SACLN,UAAU,oCACVO,QAAS,WJ1CtB,IAAuBoD,KI2CMjC,EAAQrB,GJ1CnCG,EAAQ,aAAD,OACCmD,GACb,CACE3B,OAAQ,SACRC,QAAS,CACP,eAAgB,sCIsCCrB,MAAK,WACJsC,EAAYD,EAASW,QAAO,SAAAC,GAAI,OAC9BA,EAAKxD,KAAOqB,EAAQrB,WAP9B,eAcA,4BAAIqB,EAAQK,kBAOtB,kCACE,qBAAK/B,UAAU,4BAAf,SACE,cAAC,EAAD,CACEF,eAAgBA,EAChBkB,aAAcoC,cCVbU,EA3FO,WACpB,MAA0B7C,mBAAiB,IAA3C,mBAAO8C,EAAP,KAAcC,EAAd,KACA,EAA0B/C,mBAAiB,IAA3C,mBAAOpB,EAAP,KAAcoE,EAAd,KACA,EAAsChD,oBAAS,GAA/C,mBAAOiD,EAAP,KAAoBC,EAApB,KACA,EAA4ClD,mBAAS,GAArD,mBAAOmD,EAAP,KAAuBC,EAAvB,KACA,EAA4CpD,mBAAS,GAArD,mBAAOnB,EAAP,KAAuBwE,EAAvB,KAEMC,EAAS,uCAAG,4BAAAjB,EAAA,sELSX9C,EAAQ,UKTG,OACVgE,EADU,OAGhBR,EAASQ,GAHO,2CAAH,qDAMfd,qBAAU,WACRa,MACC,IAEH,IAAME,EAAgBV,EAAMH,QAAO,SAAAc,GAAI,OAAIA,EAAKrE,IAAM,IAAMqE,EAAKrE,IAAM,KAEjEsE,EAAS,uCAAG,4BAAArB,EAAA,sELlBT9C,EADM,KADYL,EKqBciE,GLnBxB,iBAAD,OAAkBjE,GAGnB,UKeG,OACVyE,EADU,OAGhBT,GAAe,GAEfF,EAASW,GALO,iCLpBb,IAAsBzE,IKoBT,OAAH,qDAQfuD,qBAAU,WACRiB,MACC,CAACP,IAEJ,IAAMS,EAAoBC,uBACxB,SAAClD,GACC0C,EAAkB1C,KAEpB,CAAC9B,IAGH,OACE,sBAAKE,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACVsC,MAAO8B,EACP7B,SAAU,SAACd,GAAD,OAAW4C,GAAmB5C,EAAMe,OAAOF,QAHvD,UAKE,wBAAQA,MAAM,IAAd,uBACCmC,EAAcxE,KAAI,SAACyE,GAClB,OACE,wBAEEpC,MAAOoC,EAAKrE,GAFd,SAIGqE,EAAK7C,MAHD6C,EAAKrE,eAWtB,uBAAML,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACGkE,EAEG,cAAC,EAAD,CACErE,MAAOA,EACPC,eAAgBA,EAChBC,aAAc8E,IAIhB,cAAC,EAAD,MAIN,qBAAK7E,UAAU,eAAf,SACsB,IAAnBF,GACC,cAAC,EAAD,CACEA,eAAgBA,aCvF9BiF,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c133d28d.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[];\n  selectedPostId: number;\n  onSelectPost: (postId: number) => void;\n}\n\nexport const PostsList: React.FC<Props> = React.memo(\n  ({\n    posts,\n    selectedPostId,\n    onSelectPost,\n  }) => (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`[User #${post.userId}]: `}\n              </b>\n              {post.title}\n            </div>\n\n            {post.id === selectedPostId\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => onSelectPost(0)}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    onSelectPost(post.id);\n                  }}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  ),\n);\n","import { BASE_URL } from './api';\nimport { NewComment } from '../react-app-env';\n\nfunction request(url: string, options?: {}) {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => response.json());\n}\n\nexport function getUserPosts(userId: number) {\n  if (userId !== 0) {\n    return request(`/posts?userId=${userId}`);\n  }\n\n  return request('/posts');\n}\n\nexport function getPostDetails(postId: number) {\n  return request(`/posts/${postId}`);\n}\n\nexport function getPostComments(postId: number) {\n  return request(`/comments?postId=${postId}`);\n}\n\nexport function getUsers() {\n  return request('/users');\n}\n\nexport function addComment(comment: NewComment) {\n  return request(\n    '/comments',\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        postId: comment.postId,\n        name: comment.name,\n        email: comment.email,\n        body: comment.body,\n      }),\n    },\n  );\n}\n\nexport function deleteComment(commentId: number) {\n  return request(\n    `/comments/${commentId}`,\n    {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n    },\n  );\n}\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/posts';\n\ninterface Props {\n  selectedPostId: number;\n  onAddComment: (added: boolean) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  onAddComment,\n}) => {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const addNewComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId: selectedPostId,\n      name: commentName,\n      email: commentEmail,\n      body: commentBody,\n    };\n\n    addComment(newComment)\n      .then(() => {\n        onAddComment(true);\n        setCommentName('');\n        setCommentEmail('');\n        setCommentBody('');\n      });\n\n    onAddComment(false);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => addNewComment(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentName}\n          onChange={(event) => setCommentName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={commentEmail}\n          onChange={(event) => setCommentEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={(event) => setCommentBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Comment, Post } from '../../react-app-env';\nimport {\n  getPostComments,\n  getPostDetails,\n  deleteComment,\n} from '../../api/posts';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = React.memo(\n  ({\n    selectedPostId,\n  }) => {\n    const [showComments, setShowComments] = useState(true);\n    const [postDetails, setPostDetails] = useState<Post>();\n    const [postDetailsLoaded, setPostDetailsLoaded] = useState(false);\n    const [comments, setComments] = useState<Comment[]>([]);\n    const [isCommentAdded, setIsCommentAdded] = useState(false);\n\n    const loadPostDetails = async () => {\n      setPostDetailsLoaded(false);\n\n      const loadedPostDetails = await getPostDetails(selectedPostId);\n\n      setPostDetailsLoaded(true);\n\n      setPostDetails(loadedPostDetails);\n    };\n\n    const loadComments = async () => {\n      const loadedComments = await getPostComments(selectedPostId);\n\n      setComments(loadedComments);\n    };\n\n    useEffect(() => {\n      loadPostDetails();\n      loadComments();\n    }, [selectedPostId, isCommentAdded]);\n\n    return (\n      <div className=\"PostDetails\">\n        <h2>{`Post details: ${postDetails?.id}`}</h2>\n\n        {postDetailsLoaded\n          ? (\n            <section className=\"PostDetails__post\">\n              <p>{postDetails?.body}</p>\n            </section>\n          )\n          : (\n            <Loader />\n          )}\n\n        <section className=\"PostDetails__comments\" data-cy=\"postDetails\">\n          {showComments\n            ? (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setShowComments(false)}\n              >\n                Hide comments\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setShowComments(true)}\n              >\n                Show comments\n              </button>\n            )}\n\n          {showComments && (\n            <ul className=\"PostDetails__list\">\n              {comments.map((comment: Comment) => (\n                <li className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deleteComment(comment.id)\n                        .then(() => {\n                          setComments(comments.filter(item => (\n                            item.id !== comment.id\n                          )));\n                        });\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              selectedPostId={selectedPostId}\n              onAddComment={setIsCommentAdded}\n            />\n          </div>\n        </section>\n      </div>\n    );\n  },\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post, User } from './react-app-env';\nimport { getUserPosts, getUsers } from './api/posts';\nimport { Loader } from './components/Loader';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postsLoaded, setPostsLoaded] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const loadUsers = async () => {\n    const loadedUsers = await getUsers();\n\n    setUsers(loadedUsers);\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const firstTenUsers = users.filter(user => user.id <= 10 && user.id >= 1);\n\n  const loadPosts = async () => {\n    const loadedPosts = await getUserPosts(selectedUserId);\n\n    setPostsLoaded(true);\n\n    setPosts(loadedPosts);\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  const selectPostHandler = useCallback(\n    (postId: number) => {\n      setSelectedPostId(postId);\n    },\n    [selectedPostId],\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={(event) => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {firstTenUsers.map((user) => {\n              return (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              );\n            })}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {postsLoaded\n            ? (\n              <PostsList\n                posts={posts}\n                selectedPostId={selectedPostId}\n                onSelectPost={selectPostHandler}\n              />\n            )\n            : (\n              <Loader />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}