{"version":3,"sources":["components/PostsList/PostsList.tsx","api/posts.ts","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","selectedPostId","onSelectPost","className","map","post","userId","title","id","type","onClick","request","url","options","fetch","then","response","json","NewCommentForm","onAddComment","useState","commentName","setCommentName","commentEmail","setCommentEmail","commentBody","setCommentBody","addNewComment","event","comment","preventDefault","postId","name","email","body","method","headers","JSON","stringify","onSubmit","placeholder","value","onChange","target","PostDetails","showComments","setShowComments","postDetails","setPostDetails","comments","setComments","isCommentAdded","setIsCommentAdded","loadPostDetails","a","loadedPostDetails","loadComments","loadedComments","useEffect","commentId","filter","item","App","setPosts","selectedUserId","setSelectedUserId","setSelectedPostId","count","setCount","loadPosts","loadedPosts","selectPostHandler","useCallback","state","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ce1e2aa.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[];\n  selectedPostId: number;\n  onSelectPost: (postId: number) => void;\n}\n\nexport const PostsList: React.FC<Props> = React.memo(\n  ({\n    posts,\n    selectedPostId,\n    onSelectPost,\n  }) => (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`[User #${post.userId}]: `}\n              </b>\n              {post.title}\n            </div>\n\n            {post.id === selectedPostId\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => onSelectPost(0)}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    onSelectPost(post.id);\n                  }}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  ),\n);\n","import { BASE_URL } from './api';\nimport { NewComment } from '../react-app-env';\n\nfunction request(url: string, options?: {}) {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => response.json());\n}\n\nexport function getUserPosts(userId: number) {\n  if (userId !== 0) {\n    return request(`/posts?userId=${userId}`);\n  }\n\n  return request('/posts');\n}\n\nexport function getPostDetails(postId: number) {\n  return request(`/posts/${postId}`);\n}\n\nexport function getPostComments(postId: number) {\n  return request(`/comments?postId=${postId}`);\n}\n\nexport function addComment(comment: NewComment) {\n  return request(\n    '/comments',\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        postId: comment.postId,\n        name: comment.name,\n        email: comment.email,\n        body: comment.body,\n      }),\n    },\n  );\n}\n\nexport function deleteComment(commentId: number) {\n  return request(\n    `/comments/${commentId}`,\n    {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n    },\n  );\n}\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/posts';\n\ninterface Props {\n  selectedPostId: number;\n  onAddComment: (added: boolean) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  onAddComment,\n}) => {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const addNewComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId: selectedPostId,\n      name: commentName,\n      email: commentEmail,\n      body: commentBody,\n    };\n\n    addComment(newComment)\n      .then(() => {\n        onAddComment(true);\n        setCommentName('');\n        setCommentEmail('');\n        setCommentBody('');\n      });\n\n    onAddComment(false);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => addNewComment(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentName}\n          onChange={(event) => setCommentName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={commentEmail}\n          onChange={(event) => setCommentEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={(event) => setCommentBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Comment, Post } from '../../react-app-env';\nimport {\n  getPostComments,\n  getPostDetails,\n  deleteComment,\n} from '../../api/posts';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = React.memo(\n  ({\n    selectedPostId,\n  }) => {\n    const [showComments, setShowComments] = useState(true);\n    const [postDetails, setPostDetails] = useState<Post>();\n    const [comments, setComments] = useState<Comment[]>([]);\n    const [isCommentAdded, setIsCommentAdded] = useState(false);\n\n    const loadPostDetails = async () => {\n      const loadedPostDetails = await getPostDetails(selectedPostId);\n\n      setPostDetails(loadedPostDetails);\n    };\n\n    const loadComments = async () => {\n      const loadedComments = await getPostComments(selectedPostId);\n\n      setComments(loadedComments);\n    };\n\n    useEffect(() => {\n      loadPostDetails();\n      loadComments();\n    }, [selectedPostId, isCommentAdded]);\n\n    return (\n      <div className=\"PostDetails\">\n        <h2>{`Post details: ${postDetails?.id}`}</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{postDetails?.body}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\" data-cy=\"postDetails\">\n          {showComments\n            ? (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setShowComments(false)}\n              >\n                Hide comments\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setShowComments(true)}\n              >\n                Show comments\n              </button>\n            )}\n\n          {showComments && (\n            <ul className=\"PostDetails__list\">\n              {comments.map((comment: Comment) => (\n                <li className=\"PostDetails__list-item\">\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deleteComment(comment.id)\n                        .then(() => {\n                          setComments(comments.filter(item => (\n                            item.id !== comment.id\n                          )));\n                        });\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              selectedPostId={selectedPostId}\n              onAddComment={setIsCommentAdded}\n            />\n          </div>\n        </section>\n      </div>\n    );\n  },\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './react-app-env';\nimport { getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const [count, setCount] = useState(0);\n\n  const loadPosts = async () => {\n    const loadedPosts = await getUserPosts(selectedUserId);\n\n    setPosts(loadedPosts);\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  const selectPostHandler = useCallback(\n    (postId: number) => {\n      setSelectedPostId(postId);\n    },\n    [selectedPostId],\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <button\n          type=\"button\"\n          onClick={() => setCount((state) => state + 1)}\n        >\n          {count}\n        </button>\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={(event) => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            onSelectPost={selectPostHandler}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0 && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}